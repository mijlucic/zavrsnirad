<!DOCTYPE html>
<html>
<head>
  <title><%= title %> - SVEA</title>

  <% include partials/head %>
  <link rel='stylesheet' href='/stylesheets/style.css' />
  <script src="https://unpkg.com/@webcomponents/webcomponentsjs/webcomponents-loader.js"></script>
  <script src="https://webrtc.github.io/adapter/adapter-latest.js"></script>

</head>
<body>
<% include partials/header %>

<div class="container">
  <div class="row">
    <div class="col-12">
      <h1 class="mt-4"><%= title %></h1>
      <hr>

      <div class="alert alert-dismissible alert-warning">
        <button type="button" class="close" data-dismiss="alert">&times;</button>
        <h4 class="alert-heading">Upozorenje!</h4>
        <p class="mb-0">Snimanje zaslona trenutno je eksperimentalna funkcionalnost koju podržavaju samo Chrome i Firefox preglednici. Da biste omogućili snimanje zaslona u Chrome-u, uključite funkcionalnost "Eksperimentalna web-platforma" (pogledajte <a href="chrome://flags/#enable-experimental-web-platform-features" target="_blank">chrome://flags/#enable-experimental-web-platform-features</a>).</p>
      </div>

      <screen-sharing></screen-sharing>

    </div>

  </div>
  </div>
</div>
<% include partials/footer %>

<script type="module">
  import {LitElement, html} from 'https://unpkg.com/@polymer/lit-element@0.6.2/lit-element.js?module';

  class ScreenSharing extends LitElement {
    constructor() {
      super();
      this.enableStartCapture = true;
      this.enableStopCapture = false;
      this.enableDownloadRecording = false;
      this.stream = null;
      this.chunks = [];
      this.mediaRecorder = null;
      this.status = 'Neaktivan';
      this.recording = null;
    }

    static get properties() {
      return {
        status: String,
        enableStartCapture: Boolean,
        enableStopCapture: Boolean,
        enableDownloadRecording: Boolean,
        recording: {
          type: {
            fromAttribute: input => input
          }
        }
      };
    }

    render() {
      return html`
          <style>
            video#captured-media {
                width: 1110px;
                //height: calc(width * 16 / 9);
            }
            :host {
              display: block;
              padding: 10px;
              width: 1110px;
              //height: 100%;
            }
            video {
                --video-width: 1110px;
                //width: var(--video-width);
                //height: calc(var(--video-width) * (16 / 9));
            }
          </style>
          <link rel="stylesheet" href="css/bootstrap.min.css"/>
          <div class="p-3">
            <p>Status: ${this.status}</p>
            <button ?disabled="${!this.enableStartCapture}" @click="${e => this._startCapturing(e)}" class="btn btn-success" type="button">Pokreni snimanje zaslona</button>
            <button ?disabled="${!this.enableStopCapture}" @click="${e => this._stopCapturing(e)}" class="btn btn-danger">Zaustavi snimanje zaslona</button>
            <button ?disabled="${!this.enableDownloadRecording}" @click="${e => this._downloadRecording(e)}" class="btn btn-secondary">Preuzmi snimak</button>
            <a id="downloadLink" type="video/webm" style="display: none"></a>
          </div>
          <video ?controls="${this.recording !== null}" playsinline autoplay .src="${this.recording}" width="1110"></video>
          `;
    }

    static _startScreenCapture() {
      if (navigator.getDisplayMedia) {
        return navigator.getDisplayMedia({video: true});
      } else if (navigator.mediaDevices.getDisplayMedia) {
        return navigator.mediaDevices.getDisplayMedia({video: true});
      } else {
        return navigator.mediaDevices.getUserMedia({video: {mediaSource: 'screen'}});
      }
    }

    async _startCapturing(e) {
      console.log('Pokrenuto snimanje.');
      this.status = 'Pokrenuto snimanje zaslona.';
      this.enableStartCapture = false;
      this.enableStopCapture = true;
      this.enableDownloadRecording = false;
      this.requestUpdate('buttons');

      if (this.recording) {
        window.URL.revokeObjectURL(this.recording);
      }

      this.chunks = [];
      this.recording = null;
      this.stream = await ScreenSharing._startScreenCapture();
      this.stream.addEventListener('inactive', e => {
        console.log('Capture stream inactive - stop recording!');
        this._stopCapturing(e);
      });
      this.mediaRecorder = new MediaRecorder(this.stream, {mimeType: 'video/webm'});
      this.mediaRecorder.addEventListener('dataavailable', event => {
        if (event.data && event.data.size > 0) {
          this.chunks.push(event.data);
        }
      });
      this.mediaRecorder.start(10);
    }

    _stopCapturing(e) {
      console.log('Zaustavljeno snimanje.');
      this.status = 'Snimanje zaslona završeno.';
      this.enableStartCapture = true;
      this.enableStopCapture = false;
      this.enableDownloadRecording = true;

      this.mediaRecorder.stop();
      this.mediaRecorder = null;
      this.stream.getTracks().forEach(track => track.stop());
      this.stream = null;

      this.recording = window.URL.createObjectURL(new Blob(this.chunks, {type: 'video/webm'}));
    }

    _downloadRecording(e) {
      console.log('Download recording.');
      this.enableStartCapture = true;
      this.enableStopCapture = false;
      this.enableDownloadRecording = false;

      const downloadLink = this.shadowRoot.querySelector('a#downloadLink');
      downloadLink.addEventListener('progress', e => console.log(e));
      downloadLink.href = this.recording;
      downloadLink.download = 'snimak-ekrana_SVEA.webm';
      downloadLink.click();
    }
  }

  customElements.define('screen-sharing', ScreenSharing);
</script>

</body>
</html>