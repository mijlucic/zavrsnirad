<!DOCTYPE html>
<html>
<head>
  <title><%= title %> - SVEA</title>
  <% include partials/head %>
  <script src="https://webrtc.github.io/adapter/adapter-latest.js"></script>

  <style>
    div.select {
      display: inline-block;
    }
    p.small {
      font-size: 0.7em;
    }
    label {
      display: inline-block;
    }
  </style>
</head>
<body>
<% include partials/header %>

<div class="container">
  <div class="row">
    <div class="col-12">
      <h1 class="mt-4"><%= title %></h1>
      <hr>

      <div class="alert alert-dismissible alert-warning">
        <button type="button" class="close" data-dismiss="alert">&times;</button>
        <h4 class="alert-heading">Upozorenje!</h4>
        <p class="mb-0" id="odobrite">Odobrite snimanje zvuka i videa na vašem pregledniku.</p>
      </div>
    </div>
  </div>
  <div class="row">
    <div class="col-8">
      <!--<video id="video" playsinline autoplay></video>-->
      <div>
        <button hidden id="start" type="button" class="btn btn-success">Pokrenite kameru</button>
        <button id="record" disabled class="btn btn-danger">Pokrenite snimanje</button>
        <button id="play" disabled class="btn btn-primary">Pokreni video</button>
        <button id="download" disabled class="btn btn-secondary">Preuzmi video</button>
      </div>

      <div class="m-3">
        <video id="gum" playsinline autoplay></video>
        <video id="recorded" playsinline loop></video>
      </div>

    </div>

    <div class="col-4">
      <h3>Postavke videa</h3>
      <hr>

      <div class="select">
        <label for="audioSource">Odaberite mikrofon: </label><select id="audioSource"></select>
      </div>
      <div class="select">
        <label for="audioOutput">Odaberite zvučnik za reprodukciju: </label><select id="audioOutput"></select>
      </div>
      <div class="select">
        <label for="videoSource">Odaberite web kameru: </label><select id="videoSource"></select>
      </div>

      <div class="m-2">
        <p>Isključite echo: <input type="checkbox" id="echoCancellation"></p>
      </div>

      <h4>Odaberite rezoluciju:</h4>
      <hr>
      <div id="buttons" class="m-2">
        <button id="qvga" class="btn btn-outline-primary">QVGA</button>
        <button id="vga" class="btn btn-outline-primary">VGA</button>
        <button id="hd" class="btn btn-outline-primary">HD</button>
        <button id="full-hd" class="btn btn-outline-primary">Full HD</button>
        <button id="fourK" class="btn btn-outline-primary">4K</button>
      </div>

      <div id="videoblock" class="m-2">
        <div id="width" hidden>
          <label>Width <span></span>px:</label>
          <input type="range" min="0" max="7680" value="0">
        </div>
        <!--<input id="sizelock" type="checkbox">Lock video size<br>-->
        <!--<input id="aspectlock" type="checkbox">Lock aspect ratio<br>-->
      </div>
      <hr>
      <p class="pt-2" id="errormessage"></p>
      <div>
        <span id="errorMsg"></span>
      </div>
    </div>
  </div>
</div>
<% include partials/footer %>

<script type="text/javascript" async>

  const mediaSource = new MediaSource();
  mediaSource.addEventListener('sourceopen', handleSourceOpen, false);
  let mediaRecorder;
  let recordedBlobs;
  let sourceBuffer;

  const errorMsgElement = document.querySelector('span#errorMsg');
  const recordedVideo = document.querySelector('video#recorded');
  const recordButton = document.querySelector('button#record');
  const startStopButton = document.querySelector('button#start');
  recordButton.addEventListener('click', () => {
    if (recordButton.textContent === 'Pokrenite snimanje') {
      startRecording();
      //startStopButton.textContent = 'Zaustavi kameru';
      // var track = mediaSource.getTracks()[0];
      // track.stop();
    } else {
      stopRecording();
      recordButton.textContent = 'Pokrenite snimanje';
      playButton.disabled = false;
      downloadButton.disabled = false;
    }
  });

  const playButton = document.querySelector('button#play');
  playButton.addEventListener('click', () => {
    const superBuffer = new Blob(recordedBlobs, {type: 'video/webm'});
    recordedVideo.src = null;
    recordedVideo.srcObject = null;
    recordedVideo.src = window.URL.createObjectURL(superBuffer);
    recordedVideo.controls = true;
    recordedVideo.play();
  });

  const downloadButton = document.querySelector('button#download');
  downloadButton.addEventListener('click', () => {
    const blob = new Blob(recordedBlobs, {type: 'video/webm'});
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.style.display = 'none';
    a.href = url;
    a.download = 'video_SVEA.webm';
    document.body.appendChild(a);
    a.click();
    setTimeout(() => {
      document.body.removeChild(a);
      window.URL.revokeObjectURL(url);
    }, 100);
  });

  function handleSourceOpen(event) {
    console.log('MediaSource opened');
    sourceBuffer = mediaSource.addSourceBuffer('video/webm; codecs="vp8"');
    console.log('Source buffer: ', sourceBuffer);
  }

  function handleDataAvailable(event) {
    if (event.data && event.data.size > 0) {
      recordedBlobs.push(event.data);
    }
  }

  function startRecording() {
    recordedBlobs = [];
    let options = {mimeType: 'video/webm;codecs=vp9'};
    if (!MediaRecorder.isTypeSupported(options.mimeType)) {
      console.error(`${options.mimeType} is not Supported`);
      errorMsgElement.innerHTML = `${options.mimeType} is not Supported`;
      options = {mimeType: 'video/webm;codecs=vp8'};
      if (!MediaRecorder.isTypeSupported(options.mimeType)) {
        console.error(`${options.mimeType} is not Supported`);
        errorMsgElement.innerHTML = `${options.mimeType} is not Supported`;
        options = {mimeType: 'video/webm'};
        if (!MediaRecorder.isTypeSupported(options.mimeType)) {
          console.error(`${options.mimeType} is not Supported`);
          errorMsgElement.innerHTML = `${options.mimeType} is not Supported`;
          options = {mimeType: ''};
        }
      }
    }

    try {
      mediaRecorder = new MediaRecorder(window.stream, options);
    } catch (e) {
      console.error('Exception while creating MediaRecorder:', e);
      errorMsgElement.innerHTML = `Exception while creating MediaRecorder: ${JSON.stringify(e)}`;
      return;
    }

    console.log('Created MediaRecorder', mediaRecorder, 'with options', options);
    recordButton.textContent = 'Zaustavi snimanje';
    startStopButton.hidden = true;
    playButton.disabled = true;
    downloadButton.disabled = true;
    mediaRecorder.onstop = (event) => {
      console.log('Recorder stopped: ', event);
    };
    mediaRecorder.ondataavailable = handleDataAvailable;
    mediaRecorder.start(10); // collect 10ms of data
    console.log('MediaRecorder started', mediaRecorder);
  }

  function stopRecording() {
    mediaRecorder.stop();
    console.log('Recorded Blobs: ', recordedBlobs);
  }

  function handleSuccess(stream) {
    recordButton.disabled = false;
    console.log('getUserMedia() got stream:', stream);
    window.stream = stream;

    const gumVideo = document.querySelector('video#gum');
    gumVideo.srcObject = stream;
  }

  async function init(constraints) {
    try {
      const stream = await navigator.mediaDevices.getUserMedia(constraints);
      handleSuccess(stream);
    } catch (e) {
      console.error('navigator.getUserMedia error:', e);
      errorMsgElement.innerHTML = `navigator.getUserMedia error:${e.toString()}`;
    }
  }

  async function onLoadPage() {
    const hasEchoCancellation = document.querySelector('#echoCancellation').checked;
    const constraints = {
      audio: {
        echoCancellation: {exact: hasEchoCancellation}
      },
      video: {
        width: 1280, height: 720
      }
    };
    console.log('Using media constraints:', constraints);
    await init(constraints);
    const startStopButtons = document.getElementById('#start');
    // console.log("Butto nstart", startStopButtons);
    start();
  }
  document.querySelector('button#start').addEventListener('click', async () => {
    const hasEchoCancellation = document.querySelector('#echoCancellation').checked;
    const constraints = {
      audio: {
        echoCancellation: {exact: hasEchoCancellation}
      },
      video: {
        width: 1280, height: 720
      }
    };
    console.log('Using media constraints:', constraints);
    await init(constraints);
    const startStopButtons = document.getElementById('#start');
    // console.log("Butto nstart", startStopButtons);
    start();
  });



  const dimensions = document.querySelector('#dimensions');
  const video = document.querySelector('video');
  let stream;

  const vgaButton = document.querySelector('#vga');
  const qvgaButton = document.querySelector('#qvga');
  const hdButton = document.querySelector('#hd');
  const fullHdButton = document.querySelector('#full-hd');
  const fourKButton = document.querySelector('#fourK');
  //const eightKButton = document.querySelector('#eightK');

  //const videoblock = document.querySelector('#videoblock');
  const messagebox = document.querySelector('#errormessage');

  const widthInput = document.querySelector('div#width input');
  const widthOutput = document.querySelector('div#width span');
  //const aspectLock = document.querySelector('#aspectlock');
  //const sizeLock = document.querySelector('#sizelock');

  let currentWidth = 0;
  let currentHeight = 0;

  vgaButton.onclick = () => {
    getMedia(vgaConstraints);
  };

  qvgaButton.onclick = () => {
    getMedia(qvgaConstraints);
  };

  hdButton.onclick = () => {
    getMedia(hdConstraints);
  };

  fullHdButton.onclick = () => {
    getMedia(fullHdConstraints);
  };

  fourKButton.onclick = () => {
    getMedia(fourKConstraints);
  };

  const qvgaConstraints = {
    video: {width: {exact: 320}, height: {exact: 240}}
  };

  const vgaConstraints = {
    video: {width: {exact: 640}, height: {exact: 480}}
  };

  const hdConstraints = {
    video: {width: {exact: 1280}, height: {exact: 720}}
  };

  const fullHdConstraints = {
    video: {width: {exact: 1920}, height: {exact: 1080}}
  };

  const fourKConstraints = {
    video: {width: {exact: 4096}, height: {exact: 2160}}
  };


  function gotStream(mediaStream) {
    stream = window.stream = mediaStream; // stream available to console
    video.srcObject = mediaStream;
    messagebox.style.display = 'none';
    videoblock.style.display = 'block';
    let track = mediaStream.getVideoTracks()[0];
    let constraints = track.getConstraints();
    console.log('Result constraints: ' + JSON.stringify(constraints));
    if (constraints && constraints.width && constraints.width.exact) {
      widthInput.value = constraints.width.exact;
      widthOutput.textContent = constraints.width.exact;
    } else if (constraints && constraints.width && constraints.width.min) {
      widthInput.value = constraints.width.min;
      widthOutput.textContent = constraints.width.min;
    }
  }

  function errorMessage(who, what) {
    let message = who + ': ' + what;
    messagebox.innerText = message;
    messagebox.style.display = 'block';
    console.log(message);
  }

  function clearErrorMessage() {
    messagebox.style.display = 'none';
  }

  function displayVideoDimensions(whereSeen) {
    if (video.videoWidth) {
      //dimensions.innerText = 'Actual video dimensions: ' + video.videoWidth +
              'x' + video.videoHeight + 'px.';
      if (currentWidth !== video.videoWidth
              || currentHeight !== video.videoHeight) {
        //console.log(whereSeen + ': ' + dimensions.innerText);
        currentWidth = video.videoWidth;
        currentHeight = video.videoHeight;
      }
    } else {
      //dimensions.innerText = 'Video not ready';
    }
  }

  video.onloadedmetadata = () => {
    displayVideoDimensions('loadedmetadata');
  };

  video.onresize = () => {
    displayVideoDimensions('resize');
  };

  function constraintChange(e) {
    widthOutput.textContent = e.target.value;
    let track = window.stream.getVideoTracks()[0];
    let constraints;
    // if (aspectLock.checked) {
    //   constraints = {
    //     width: {exact: e.target.value},
    //     aspectRatio: {
    //       exact: video.videoWidth / video.videoHeight
    //     }
    //   };
    // } else {
      constraints = {width: {exact: e.target.value}};
    //}
    clearErrorMessage();
    console.log('applying ' + JSON.stringify(constraints));
    track.applyConstraints(constraints)
            .then(() => {
              //console.log('applyConstraint success');
              //displayVideoDimensions('applyConstraints');
            })
            .catch(err => {
              //errorMessage('applyConstraints', err.name);
            });
  }

  widthInput.onchange = constraintChange;

  // sizeLock.onchange = () => {
  //   if (sizeLock.checked) {
  //     console.log('Setting fixed size');
  //     video.style.width = '100%';
  //   } else {
  //     console.log('Setting auto size');
  //     video.style.width = 'auto';
  //   }
  // };

  function getMedia(constraints) {
    if (stream) {
      stream.getTracks().forEach(track => {
        track.stop();
      });
    }

    clearErrorMessage();
    videoblock.style.display = 'none';
    navigator.mediaDevices.getUserMedia(constraints)
            .then(gotStream)
            .catch(e => {
              errorMessage('Kamera ne podržava ovaj format videa!');
            });
  }

  const audioInputSelect = document.querySelector('select#audioSource');
  const audioOutputSelect = document.querySelector('select#audioOutput');
  const videoSelect = document.querySelector('select#videoSource');
  const selectors = [audioInputSelect, audioOutputSelect, videoSelect];

  audioOutputSelect.disabled = !('sinkId' in HTMLMediaElement.prototype);

  function gotDevices(deviceInfos) {
    // Handles being called several times to update labels. Preserve values.
    const values = selectors.map(select => select.value);
    selectors.forEach(select => {
      while (select.firstChild) {
        select.removeChild(select.firstChild);
      }
    });
    for (let i = 0; i !== deviceInfos.length; ++i) {
      const deviceInfo = deviceInfos[i];
      const option = document.createElement('option');
      option.value = deviceInfo.deviceId;
      if (deviceInfo.kind === 'audioinput') {
        option.text = deviceInfo.label || `microphone ${audioInputSelect.length + 1}`;
        audioInputSelect.appendChild(option);
      } else if (deviceInfo.kind === 'audiooutput') {
        option.text = deviceInfo.label || `speaker ${audioOutputSelect.length + 1}`;
        audioOutputSelect.appendChild(option);
      } else if (deviceInfo.kind === 'videoinput') {
        option.text = deviceInfo.label || `camera ${videoSelect.length + 1}`;
        videoSelect.appendChild(option);
      } else {
        console.log('Some other kind of source/device: ', deviceInfo);
      }
    }
    selectors.forEach((select, selectorIndex) => {
      if (Array.prototype.slice.call(select.childNodes).some(n => n.value === values[selectorIndex])) {
        select.value = values[selectorIndex];
      }
    });
  }

  navigator.mediaDevices.enumerateDevices().then(gotDevices).catch(handleError);

  // Attach audio output device to video element using device/sink ID.
  function attachSinkId(element, sinkId) {
    if (typeof element.sinkId !== 'undefined') {
      element.setSinkId(sinkId)
              .then(() => {
                console.log(`Success, audio output device attached: ${sinkId}`);
              })
              .catch(error => {
                let errorMessage = error;
                if (error.name === 'SecurityError') {
                  errorMessage = `You need to use HTTPS for selecting audio output device: ${error}`;
                }
                console.error(errorMessage);
                // Jump back to first output device in the list as it's the default.
                audioOutputSelect.selectedIndex = 0;
              });
    } else {
      console.warn('Browser does not support output device selection.');
    }
  }

  function changeAudioDestination() {
    const audioDestination = audioOutputSelect.value;
    attachSinkId(video, audioDestination);
  }

  function gotStream(stream) {
    window.stream = stream; // make stream available to console
    video.srcObject = stream;
    // Refresh button list in case labels have become available
    return navigator.mediaDevices.enumerateDevices();
  }

  function handleError(error) {
    console.log('navigator.MediaDevices.getUserMedia error: ', error.message, error.name);
  }

  function start() {
    if (window.stream) {
      window.stream.getTracks().forEach(track => {
        track.stop();
      });
    }
    const audioSource = audioInputSelect.value;
    const videoSource = videoSelect.value;
    const constraints = {
      audio: {deviceId: audioSource ? {exact: audioSource} : undefined},
      video: {deviceId: videoSource ? {exact: videoSource} : undefined}
    };
    navigator.mediaDevices.getUserMedia(constraints).then(gotStream).then(gotDevices).catch(handleError);
  }

  audioInputSelect.onchange = start;
  audioOutputSelect.onchange = changeAudioDestination;

  videoSelect.onchange = start;

  onLoadPage();  //start();
</script>
</body>
</html>